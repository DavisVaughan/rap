% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/zap.R
\name{zap}
\alias{zap}
\alias{zap_dbl}
\alias{zap_lgl}
\alias{zap_int}
\alias{zap_chr}
\alias{zap_raw}
\title{Map over columns of a data frame simultaneously}
\usage{
zap(.tbl, ..., .map = map)

zap_dbl(...)

zap_lgl(...)

zap_int(...)

zap_chr(...)

zap_raw(...)
}
\arguments{
\item{.tbl}{A data frame}

\item{...}{A single named expression that returns
- a list for `zap()`
- a single integer for `zap_int()`
- a single double for `zap_dbl()`
- a single string for `zap_chr()`
- a single raw for `zap_raw()`
- a single boolean for `zap_lgl()`}

\item{.map}{the mapping function, eg. [map][purrr::map()] for `zap`, [map_int][purrr::map_int()] for `zap_int`, ...}
}
\value{
`.tbl` with an additional column
}
\description{
Map over columns of a data frame simultaneously
}
\details{
`zip_*(x = <expr>)` is similar to `mutate(x = pmap_*(., function(<args>) <expr>))` where :

- `<expr>` is an expression using the columns of `.tbl`
- `<args>` is the names of `.tbl` as formal arguments
}
\examples{

library(purrr)
library(dplyr)
library(tibble)
tbl <- tibble(cyl = c(4, 6, 8), mpg = c(30, 25, 20))

# inspired from https://github.com/tidyverse/purrr/issues/280#issuecomment-270844528
#
# with the mutate + pmap idiom:
tbl \%>\%
  mutate(x = pmap(.l = list(cyl, mpg), function(cc, mm) filter(mtcars, cyl == cc, mpg < mm))) \%>\%
  mutate(n = map_int(x, nrow))

# with zap
tbl \%>\%
  zap(x = ~filter(mtcars, cyl == !!cyl, mpg < !!mpg)) \%>\%
  zap_int(n = ~nrow(x))

}
